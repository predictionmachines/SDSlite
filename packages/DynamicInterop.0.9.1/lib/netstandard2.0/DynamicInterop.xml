<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamicInterop</name>
    </assembly>
    <members>
        <member name="T:DynamicInterop.IDynamicLibraryLoader">
            <summary>
            An interface definition to hide the platform specific aspects of library loading
            </summary>
            <remarks>There are probably projects 'out there' doing this already, but nothing 
            is obvious from a quick search. Re-consider again if you need more features.</remarks>
        </member>
        <member name="M:DynamicInterop.IDynamicLibraryLoader.LoadLibrary(System.String)">
            <summary>
            Load a native library (DLL on windows, shared libraries on Linux and MacOS)
            </summary>
            <param name="filename">The file name (short file name) of the library to load, e.g. R.dll on Windows</param>
            <returns></returns>
        </member>
        <member name="M:DynamicInterop.IDynamicLibraryLoader.GetLastError">
            <summary>
            Gets the last error message from the native API used to load the library.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DynamicInterop.IDynamicLibraryLoader.FreeLibrary(System.IntPtr)">
            <summary>
            Unloads a library
            </summary>
            <param name="handle">The pointer to the entry point of the library</param>
            <returns></returns>
        </member>
        <member name="M:DynamicInterop.IDynamicLibraryLoader.GetFunctionAddress(System.IntPtr,System.String)">
            <summary>
            Gets a pointer to the address of a native function in the specified loaded library
            </summary>
            <param name="hModule">Handle of the module(library)</param>
            <param name="lpProcName">The name of the function sought</param>
            <returns>Handle to the native function</returns>
        </member>
        <member name="T:DynamicInterop.MarshalExtra">
            <summary> 
            Extra methods on top of System.Runtime.InteropServices.Marshal for allocating unmanaged memory, copying unmanaged
            memory blocks, and converting managed to unmanaged types</summary>
        </member>
        <member name="M:DynamicInterop.MarshalExtra.AllocHGlobal``1">
             <summary> Allocates memory from the unmanaged memory of the process for a given type</summary>
            
             <typeparam name="T"> A type that has an equivalent in the unmanaged world e.g. int or a struct Point </typeparam>
            
             <returns> A pointer to the newly allocated memory. This memory must be released using the FreeHGlobal(IntPtr) method, or related.</returns>
        </member>
        <member name="M:DynamicInterop.MarshalExtra.PtrToStructure``1(System.IntPtr,System.Boolean)">
             <summary> Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter. 
                       Note it is almost superseded in .NET Framework 4.5.1 and later versions; consider your needs</summary>
            
             <exception cref="T:System.ArgumentException"> Thrown when one or more arguments have unsupported or
                                                  illegal values.</exception>
            
             <typeparam name="T"> The type of the object to which the data is to be copied. This must be a structure.</typeparam>
             <param name="ptr">   A pointer to an unmanaged block of memory.</param>
             <param name="cleanup"> (Optional) If true, free the native memory block pointed to by ptr. This feature is handy in generated marshalling code.</param>
            
             <returns> A managed object that contains the data that the ptr parameter points to</returns>
        </member>
        <member name="M:DynamicInterop.MarshalExtra.StructureToPtr``1(``0)">
             <summary>Marshals data from a managed object of a specified type to an unmanaged block of memory.
                       Note it is almost superseded in .NET Framework 4.5.1 and later versions; consider your needs</summary>
            
             <typeparam name="T"> The type of the managed object.</typeparam>
             <param name="structure"> A managed object that holds the data to be marshaled. The object must be a structure.</param>
            
             <returns> A pointer to a newly allocated unmanaged block of memory.</returns>
        </member>
        <member name="M:DynamicInterop.MarshalExtra.FreeNativeStruct``1(System.IntPtr,``0@,System.Boolean)">
             <summary> Frees all substructures of a specified type that the specified unmanaged memory block points to.</summary>
            
             <typeparam name="T"> The type of the managed object.</typeparam>
             <param name="ptr">           A pointer to an unmanaged block of memory.</param>
             <param name="managedObject"> [in,out] The managed object.</param>
             <param name="copy">          (Optional) True to copy.</param>
        </member>
        <member name="T:DynamicInterop.INativeHandle">
            <summary> Interface for native handle.</summary>
            <remarks>This is similar in intent to the BCL SafeHandle, but with release 
                     behaviors that are more desirable in particular circumstances.
                     </remarks>
        </member>
        <member name="M:DynamicInterop.INativeHandle.GetHandle">
             <summary> Returns the value of the handle.</summary>
            
             <returns> The handle.</returns>
        </member>
        <member name="M:DynamicInterop.INativeHandle.AddRef">
            <summary>Manually increments the reference counter</summary>
        </member>
        <member name="M:DynamicInterop.INativeHandle.Release">
            <summary>Manually decrements the reference counter. Triggers disposal if count reaches is zero.</summary>
        </member>
        <member name="T:DynamicInterop.NativeHandle">
            <summary> A stub implementation for the INativeHandle interface </summary>
        </member>
        <member name="M:DynamicInterop.NativeHandle.#ctor(System.IntPtr,System.Int32)">
             <summary> Specialised constructor for use only by derived class.</summary>
            
             <param name="pointer">         The handle, value of the pointer to the native object</param>
             <param name="currentRefCount"> (Optional) Number of pre-existing references for the native object</param>
             <remarks>If a native object was created prior to its use by .NET, its lifetime may need to extend its use 
                      from .NET. In practice the scenario is unlikely</remarks>
        </member>
        <member name="M:DynamicInterop.NativeHandle.#ctor">
            <summary> Specialised default constructor for use only by derived class. 
                      Defers setting the handle to the derived class</summary>
        </member>
        <member name="M:DynamicInterop.NativeHandle.SetHandle(System.IntPtr,System.Int32)">
             <summary> Sets a handle.</summary>
            
             <exception cref="T:System.ArgumentException"> Thrown when a pointer is a Zero pointer
                                                  .</exception>
            
             <param name="pointer">         The handle, value of the pointer to the native object</param>
             <param name="currentRefCount"> (Optional) Number of pre-existing references for the native object</param>
             <remarks>If a native object was created prior to its use by .NET, its lifetime may need to extend its use 
                      from .NET. In practice the scenario is unlikely</remarks>
        </member>
        <member name="M:DynamicInterop.NativeHandle.Finalize">
            <summary> Finaliser. Triggers the disposal of this object if not manually done.</summary>
        </member>
        <member name="M:DynamicInterop.NativeHandle.ReleaseHandle">
             <summary> Releases the native resource for this handle.</summary>
            
             <returns> True if it succeeds, false if it fails.</returns>
        </member>
        <member name="P:DynamicInterop.NativeHandle.ReferenceCount">
             <summary> Gets the number of references to the native resource for this handle.</summary>
            
             <value> The number of references.</value>
        </member>
        <member name="P:DynamicInterop.NativeHandle.Disposed">
             <summary> Gets a value indicating whether this handle has been disposed of already</summary>
            
             <value> True if disposed, false if not.</value>
        </member>
        <member name="F:DynamicInterop.NativeHandle.handle">
            <summary> The handle to the native resource.</summary>
        </member>
        <member name="P:DynamicInterop.NativeHandle.IsInvalid">
            <summary> Gets a value indicating whether this handle is invalid.</summary>
        </member>
        <member name="M:DynamicInterop.NativeHandle.Dispose">
            <summary> If the reference counts allows it, release the resource refered to by this handle.</summary>
        </member>
        <member name="M:DynamicInterop.NativeHandle.GetHandle">
             <summary> Returns the value of the handle.</summary>
            
             <returns> The handle.</returns>
        </member>
        <member name="M:DynamicInterop.NativeHandle.AddRef">
            <summary> Manually increments the reference counter.</summary>
        </member>
        <member name="M:DynamicInterop.NativeHandle.Release">
            <summary> Manually decrements the reference counter. Triggers disposal if count reaches is zero.</summary>
        </member>
        <member name="T:DynamicInterop.PlatformUtility">
            <summary>
            Helper class with functions whose behavior may be depending on the platform 
            </summary>
        </member>
        <member name="P:DynamicInterop.PlatformUtility.IsUnix">
            <summary>
            Is the platform unix-like (Unix or MacOX)
            </summary>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.GetPlatform">
            <summary>
            Gets the platform on which the current process runs.
            </summary>
            <remarks>
            <see cref="P:System.Environment.OSVersion"/>'s platform is not <see cref="F:System.PlatformID.MacOSX"/> even on Mac OS X.
            This method returns <see cref="F:System.PlatformID.MacOSX"/> when the current process runs on Mac OS X.
            This method uses UNIX's uname command to check the operating system,
            so this method cannot check the OS correctly if the PATH environment variable is changed (will returns <see cref="F:System.PlatformID.Unix"/>).
            </remarks>
            <returns>The current platform.</returns>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.ExecCommand(System.String,System.String)">
            <summary>
            Execute a command in a new process
            </summary>
            <param name="processName">Process name e.g. "uname"</param>
            <param name="arguments">Arguments e.g. "-s"</param>
            <returns>The output of the command to the standard output stream</returns>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.GetPlatformNotSupportedMsg">
            <summary>
            Gets a message saying the current platform is not supported
            </summary>
            <returns>The platform not supported message.</returns>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.FindFullPathEnvVar(System.String,System.String)">
            <summary>
            Given a DLL short file name, find all the matching occurences in directories as stored in an environment variable such as the PATH.
            </summary>
            <returns>One or more full file names found to exist</returns>
            <param name="dllName">short file name.</param>
            <param name="envVarName">Environment variable name - default PATH</param>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.FindFullPath(System.String,System.String[])">
            <summary>
            Given a DLL short file name, find all the matching occurences in directories.
            </summary>
            <returns>One or more full file names found to exist</returns>
            <param name="dllName">short file name.</param>
            <param name="directories">Directories in which to search for matching file names</param>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.FindFirstFullPath(System.String,System.String,System.String)">
             <summary> Given a DLL short file name, short or otherwise, searches for the first full path.</summary>
            
             <exception cref="T:System.DllNotFoundException"> Thrown when a DLL Not Found error condition occurs.</exception>
            
             <param name="nativeLibFilename"> Filename of the native library file.</param>
             <param name="libname">           (Optional) human-readable name of the library.</param>
             <param name="envVarName">        (Optional)
                                              Environment variable to use for search path(s) - 
                                              defaults according to platform to PATH or LD_LIBRARY_PATH if empty.</param>
             <returns> The found full path.</returns>
        </member>
        <member name="M:DynamicInterop.PlatformUtility.CreateLibraryFileName(System.String)">
             <summary> Given the stub name for a library get the likely platform specific file name</summary>
            
             <exception cref="T:System.ArgumentNullException"> Thrown when one or more required arguments are null.</exception>
            
             <param name="libraryName"> Name of the library.</param>
            
             <returns> The likely file name for the shared library.</returns>
        </member>
        <member name="M:DynamicInterop.SafeHandleUnmanagedDll.ReleaseHandle">
            <summary>
            Frees the native library this objects represents
            </summary>
            <returns>The result of the call to FreeLibrary</returns>
        </member>
        <member name="M:DynamicInterop.SafeHandleUnmanagedDll.Dispose(System.Boolean)">
            <summary>
            Frees the native library this objects represents
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DynamicInterop.UnixLibraryLoader.GetLastError">
            <summary>
            Gets the last error. NOTE: according to http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html, returns NULL if called more than once after dlopen.
            </summary>
            <returns>The last error.</returns>
        </member>
        <member name="M:DynamicInterop.UnixLibraryLoader.FreeLibrary(System.IntPtr)">
            <summary>
            Unloads a library
            </summary>
            <param name="handle">The pointer resulting from loading the library</param>
            <returns>True if the function dlclose returned 0</returns>
        </member>
        <member name="T:DynamicInterop.UnmanagedDll">
            <summary>
            A proxy for unmanaged dynamic link library (DLL).
            </summary>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.#ctor(System.String)">
            <summary>
            Creates a proxy for the specified dll.
            </summary>
            <param name="dllName">The DLL's name.</param>
        </member>
        <member name="P:DynamicInterop.UnmanagedDll.Filename">
            <summary>
            Gets the Dll file name used for this native Dll wrapper.
            </summary>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetFunction``1">
            <summary>
            Creates the delegate function for the specified function defined in the DLL.
            </summary>
            <typeparam name="TDelegate">The type of delegate. The name of the native function is assumed to be the same as the delegate type name.</typeparam>
            <returns>The delegate.</returns>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetFunction``1(System.String)">
            <summary>
            Creates the delegate function for the specified function defined in the DLL.
            </summary>
            <typeparam name="TDelegate">The type of delegate.</typeparam>
            <param name="entryPoint">The name of the function exported by the DLL</param>
            <returns>The delegate.</returns>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetFunctionAddress(System.String)">
            <summary>
            Gets the address of a native function entry point.
            </summary>
            <returns>The function address.</returns>
            <param name="lpProcName">name of the function in the native library</param>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.DangerousGetHandle(System.String)">
            <summary>
            Gets the handle of the specified entry.
            </summary>
            <param name="entryPoint">The name of function.</param>
            <returns>The handle.</returns>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.Dispose(System.Boolean)">
            <summary>
            Frees the native library this objects represents
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.Dispose">
            <summary>
            Dispose of this library.
            </summary>
            <remarks>Call <see cref="M:DynamicInterop.UnmanagedDll.Dispose"/> when you are finished using the <see cref="T:DynamicInterop.UnmanagedDll"/>. The
            <see cref="M:DynamicInterop.UnmanagedDll.Dispose"/> method leaves the <see cref="T:DynamicInterop.UnmanagedDll"/> in an unusable state.
            After calling <see cref="M:DynamicInterop.UnmanagedDll.Dispose"/>, you must release all references to the
            <see cref="T:DynamicInterop.UnmanagedDll"/> so the garbage collector can reclaim the memory that the
            <see cref="T:DynamicInterop.UnmanagedDll"/> was occupying.</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.WriteInt32(System.String,System.Int32)">
            <summary>
            Writes an int32 value to the address of a symbol in the library. 
            </summary>
            <param name="symbolName">Symbol name.</param>
            <param name="value">Value.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetInt32(System.String)">
            <summary>
            Reads an int32 value from the address of a symbol in the library. 
            </summary>
            <returns>The value for this symbol, read as an int32</returns>
            <param name="symbolName">Symbol name.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.WriteInt64(System.String,System.Int64)">
            <summary>
            Writes an int64 value to the address of a symbol in the library. 
            </summary>
            <param name="symbolName">Symbol name.</param>
            <param name="value">Value.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetInt64(System.String)">
            <summary>
            Reads an int64 value from the address of a symbol in the library. 
            </summary>
            <returns>The value for this symbol, read as an int64</returns>
            <param name="symbolName">Symbol name.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.WriteIntPtr(System.String,System.IntPtr)">
            <summary>
            Writes an IntPtr value to the address of a symbol in the library. 
            </summary>
            <param name="symbolName">Symbol name.</param>
            <param name="value">Value.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetIntPtr(System.String)">
            <summary>
            Reads an IntPtr value from the address of a symbol in the library. 
            </summary>
            <returns>The value for this symbol, read as an IntPtr</returns>
            <param name="symbolName">Symbol name.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.WriteByte(System.String,System.Byte)">
            <summary>
            Writes a Byte value to the address of a symbol in the library. 
            </summary>
            <param name="symbolName">Symbol name.</param>
            <param name="value">Value.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetByte(System.String)">
            <summary>
            Reads a byte value from the address of a symbol in the library. 
            </summary>
            <returns>The value for this symbol, read as a byte</returns>
            <param name="symbolName">Symbol name.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
        <member name="M:DynamicInterop.UnmanagedDll.GetAnsiString(System.String)">
            <summary>
            Reads a string value from the address of a symbol in the library. 
            </summary>
            <returns>The value for this symbol, read as an ANSI string</returns>
            <param name="symbolName">Symbol name.</param>
            <remarks>Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the symbol is not exported by the library</remarks>
        </member>
    </members>
</doc>
